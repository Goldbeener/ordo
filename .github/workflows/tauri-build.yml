name: Tauri Build & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 安装 pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm --version

      - name: 重新设置 Node.js，启用 pnpm 缓存
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 安装前端依赖
        run: pnpm install

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-apple-darwin
            aarch64-apple-darwin
            x86_64-pc-windows-msvc

      - name: 安装 Windows 依赖（手动安装 Wix）
        if: matrix.platform == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe" -OutFile "C:\wix311.exe"
          Start-Process -FilePath "C:\wix311.exe" -ArgumentList "/quiet" -NoNewWindow -Wait
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 安装 macOS 交叉编译工具
        if: matrix.platform == 'macos-latest'
        run: |
          brew install zig
          cargo install cargo-zigbuild

      - name: 安装 Tauri CLI
        run: cargo install tauri-cli --locked

      - name: 构建应用
        run: cargo tauri build
        shell: bash

      - name: 列出构建目录文件（调试用）
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "macOS bundle目录内容:"
            ls -la src-tauri/target/release/bundle/macos/ || echo "macOS bundle目录不存在"
            echo "macOS dmg目录内容:"
            ls -la src-tauri/target/release/bundle/dmg/ || echo "macOS dmg目录不存在"
          else
            echo "Windows 构建产物:"
            find src-tauri/target -name "*.msi" -o -name "*.exe" | grep -v "\\\\target\\\\debug\\\\"
          fi
        shell: bash

      - name: 确保构建目录存在
        run: mkdir -p release-assets

      - name: 移动 macOS 构建产物（修复版）
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          # 确保目标目录存在
          mkdir -p release-assets/macos
          
          cd src-tauri/target/release/
          zip -r Ordo-macos.zip bundle
          mv Ordo-macos.zip "$GITHUB_WORKSPACE/release-assets/macos/"
          
          
          # 确认复制的文件
          echo "release-assets/macos 目录内容:"
          ls -la release-assets/macos

      - name: 移动 Windows 构建产物
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          # 确保目标目录存在
          mkdir -p release-assets/windows
          
          # 复制所有 MSI 和 EXE 安装程序文件
          find src-tauri/target -name "*.msi" -type f -exec cp {} release-assets/ \;
          find src-tauri/target -name "*.exe" -type f | grep -v "\\\\target\\\\debug\\\\" | grep -v "\\\\deps\\\\" | xargs -I{} cp {} release-assets/windows/ || echo "No EXE installers found"
          
          # 检查是否成功复制了文件
          ls -la release-assets/windows/

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Tauri-Build-${{ matrix.platform }}
          path: release-assets/**/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载 macOS 产物
        uses: actions/download-artifact@v4
        with:
          name: Tauri-Build-macos-latest
          path: release-assets/macos/

      - name: 下载 Windows 产物
        uses: actions/download-artifact@v4
        with:
          name: Tauri-Build-windows-latest
          path: release-assets/windows/

      - name: 查看下载的构建产物
        run: |
          echo "macOS 构建产物:"
          ls -la release-assets/macos/
          echo "Windows 构建产物:"
          ls -la release-assets/windows/

      - name: 准备发布文件
        run: |
          mkdir -p final-release
          
          # 复制所有 macOS 产物并添加前缀
          for file in $(find release-assets/macos -type f); do
            filename=$(basename "$file")
            cp "$file" "final-release/Ordo-macOS-${filename}"
          done
          
          # 复制所有 Windows 产物并添加前缀
          for file in $(find release-assets/windows -name "*.msi" -type f); do
            cp "$file" final-release/Ordo-Windows.msi
          done
          
          for file in $(find release-assets/windows -name "*.exe" -type f); do
            cp "$file" final-release/Ordo-Windows-Setup.exe
          done
          
          # 查看最终将要发布的文件
          echo "将发布以下文件:"
          ls -la final-release/

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}', github.run_number) }}
          name: Release ${{ format('v{0}', github.run_number) }}
          draft: false
          prerelease: false
          files: final-release/*
          fail_on_unmatched_files: false