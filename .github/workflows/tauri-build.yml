name: Tauri Build & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 安装 pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm --version

      - name: 重新设置 Node.js，启用 pnpm 缓存
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 安装前端依赖
        run: pnpm install

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-apple-darwin
            aarch64-apple-darwin
            x86_64-pc-windows-msvc

      - name: 安装 Windows 依赖（手动安装 Wix）
        if: matrix.platform == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe" -OutFile "C:\wix311.exe"
          Start-Process -FilePath "C:\wix311.exe" -ArgumentList "/quiet" -NoNewWindow -Wait
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 安装 macOS 交叉编译工具
        if: matrix.platform == 'macos-latest'
        run: |
          brew install zig
          cargo install cargo-zigbuild

      - name: 安装 Tauri CLI
        run: cargo install tauri-cli

      - name: 构建应用
        run: cargo tauri build

      - name: 列出构建目录文件（调试用）
        run: ls -R src-tauri/target/release/bundle/

      - name: 确保构建目录存在
        run: mkdir -p release-assets

      - name: 移动构建产物到统一目录
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            mv src-tauri/target/release/bundle/macos/*.app release-assets/ || true
            mv src-tauri/target/release/bundle/dmg/*.dmg release-assets/ || true
          else
            mv src-tauri/target/release/bundle/msi/*.msi release-assets/ || true
            mv src-tauri/target/release/bundle/nsis/*.exe release-assets/ || true
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Tauri-Build-${{ matrix.platform }}
          path: release-assets/*


  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载 macOS 产物
        uses: actions/download-artifact@v4
        with:
          name: Tauri-Build-macos-latest
          path: release-assets/

      - name: 检查 release-assets 目录（调试用）
        run: ls -R release-assets/

      - name: 下载 Windows 产物
        uses: actions/download-artifact@v4
        with:
          name: Tauri-Build-windows-latest
          path: release-assets/

      - name: 检查 release-assets 目录（调试用）
        run: ls -R release-assets/

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: 获取 macOS DMG 产物路径
        id: find_dmg
        run: echo "DMG_PATH=$(find release-assets -name '*.dmg' -print -quit)" >> $GITHUB_ENV

      - name: 上传 macOS 产物
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: YOUR_APP_NAME-macos.dmg
          asset_content_type: application/octet-stream

      - name: 获取 Windows MSI 产物路径
        id: find_msi
        shell: bash
        run: echo "MSI_PATH=$(find release-assets -name '*.msi' -print -quit)" >> "$GITHUB_OUTPUT"

      - name: 上传 Windows MSI 产物
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_msi.outputs.MSI_PATH }}
          asset_name: YOUR_APP_NAME-windows.msi
          asset_content_type: application/x-msi

      - name: 获取 Windows NSIS 产物路径
        id: find_nsis
        shell: bash
        run: echo "NSIS_PATH=$(find release-assets -name '*.exe' -print -quit)" >> "$GITHUB_OUTPUT"

      - name: 上传 Windows NSIS 安装包
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_nsis.outputs.NSIS_PATH }}
          asset_name: YOUR_APP_NAME-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
